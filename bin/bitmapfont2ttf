#!/usr/bin/env fontforge
# -*- mode: python; coding: utf-8 -*-

import os
import sys
import argparse

libdir = os.path.dirname(os.path.realpath(__file__)) + '/../lib'
sys.path.append(libdir)

from bitmapfont2ttf import BitmapFont2TTF

parser = argparse.ArgumentParser(description = "Generate TTF files from bitmap fonts, e.g., BDF and PCF")

parser.add_argument("-m", "--family-name",                 help = "assign family name, e.g., 'Times New Roman'")
parser.add_argument("-f", "--font-name", "--ps-font-name", help = "assign font name, e.g., 'TimesNewRomanPSMT', 'TimesNewRomanPS-BoldItalicMT'")
parser.add_argument("-F", "--full-name",                   help = "assign full name, e.g., 'Times New Roman Bold Italic'")
parser.add_argument("-w", "--weight-name", "--weight",     help = "assign font weight, e.g., 'Bold', 'Regular'")

# parser.add_argument("--copyright",    help = "assign copyright holder and date, e.g., 'Copyright (c) 2020 Darren Embry'")
# parser.add_argument("--comment",      help = "assign comment string, e.g., '2020-01-01'")
# parser.add_argument("--version",      help = "assign version, e.g., '001.000'")

# parser.add_argument("--italic-angle", type = float, default = 0.0, help = "assign font italic angle, e.g., -22.5")

# parser.add_argument("--new-pixel-size", type = int, help = "change font's pixel size")
# parser.add_argument("--new-ascent",     type = int, help = "change font's pixel ascent")
# parser.add_argument("--new-descent",    type = int, help = "change font's pixel descent")

# for emulation of LCD dot matrix fonts or CRT lookin' fonts
parser.add_argument("--dot-width",     type = float, default = 1.0, help = 'width of each dot as multiple of pixel width, e.g., 0.9')
parser.add_argument("--dot-height",    type = float, default = 1.0, help = 'height of each dot as multiple of pixel width, e.g., 0.9')

# for emulation of printer dot matrix fonts
parser.add_argument("--aspect-ratio",  type = float, default = 1.0, help = "ratio of px.wd. to px.ht. (>1 = wide; <1 = narrow)")
parser.add_argument("--circular-dots", action = 'store_true')

# also for emulation of CRT lookin' fonts
parser.add_argument("--bottom", type = float, default = 0.0, help = "proportion of pixel height above baseline; default = 0.0")
parser.add_argument("--top", type = float, default = 1.0, help = "proportion of pixel height above baseline; default = 1.0")

parser.add_argument("--monospace", action = 'store_true')
parser.add_argument("--bdf-ascent-descent", action = "store_true")
parser.add_argument("--bdf-ascent-descent-2", action = "store_true")
parser.add_argument("--remove-line-gap", action = "store_true", help = "remove line gap from font metrics")
parser.add_argument("--remove-ascent-add", action = "store_true")
parser.add_argument("--all-ascent-descent", action = "store_true")

parser.add_argument("--os2-weight", type = int, help = "100 .. 900")

parser.add_argument("--panose-0", type = int, help = "family kind, for latin text")
parser.add_argument("--panose-1", type = int, help = "serif style")
parser.add_argument("--panose-2", type = int, help = "weight")
parser.add_argument("--panose-3", type = int, help = "proportion")
parser.add_argument("--panose-4", type = int, help = "contrast")
parser.add_argument("--panose-5", type = int, help = "stroke variation")
parser.add_argument("--panose-6", type = int, help = "arm style")
parser.add_argument("--panose-7", type = int, help = "letterform")
parser.add_argument("--panose-8", type = int, help = "midline")
parser.add_argument("--panose-9", type = int, help = "x-height --- see https://bit.ly/panose")

# parser.add_argument("--fix-ascent-descent", action = "store_true")
# parser.add_argument("--panose2", type = int)
# parser.add_argument("--os2-weight", type = int)
# parser.add_argument("--no-guess", action = 'store_true')
# parser.add_argument("--guess-type-2", action = 'store_true')
# parser.add_argument("--line-gap", type = int)
# parser.add_argument("--fix-weight", action = "store_true")
# parser.add_argument("--fix-style-map", action = "store_true")
# parser.add_argument("--fix-slant", action = "store_true")
# parser.add_argument("--fix-mac-style", action = "store_true")

group = parser.add_mutually_exclusive_group()
group.add_argument("--italic-angle", type = float, help = "in degrees, typically negative")
group.add_argument("--italicize-angle", type = float, help = "in degrees, typically negative")
group.add_argument("--italicize-slant", type = float, help = "in pixels, typically negative")
parser.add_argument("--italicize-center", type = int, default = 0, help = "in pixels above baseline")

parser.add_argument("--add-pixel-size", type = int, default = 0)

# For pixel sizes 6, 10, 14, etc., there is no point size you can
# specify in Windows, manually or from the dropdown, that will show an
# un-blurry font.
parser.add_argument("--windows", action = "store_true", help = "adjust so px % 4 != 2")

parser.add_argument("--no-sfnt-names", action = "store_true", help = "omit SFNT names")
parser.add_argument("--subfamily", help = "e.g., 'Bold Italic'")
parser.add_argument("--unique-id")


parser.add_argument("filename")
parser.add_argument("destfilenames",  nargs  = '*')

args = parser.parse_args()
bf2ttf = BitmapFont2TTF(args)
bf2ttf.bitmapfont2ttf()         # loop is in here
