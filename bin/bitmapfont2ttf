#!/usr/bin/env fontforge
# -*- mode: python; coding: utf-8 -*-

import os
import sys
import argparse

libdir = os.path.dirname(os.path.realpath(__file__)) + '/../lib'
sys.path.append(libdir)

from bitmapfont2ttf import BitmapFont2TTF

parser = argparse.ArgumentParser(description = "Generate TTF files from bitmap fonts, e.g., BDF and PCF")
parser.add_argument("--copyright",                help = "assign copyright holder and date, e.g., 'Copyright (c) 2020 Darren Embry'")
parser.add_argument("--comment",                  help = "assign comment string, e.g., '2020-01-01'")
parser.add_argument("--family-name",              help = "assign family name, e.g., 'Comic Sans'")
parser.add_argument("--font-name",                help = "assign font name, e.g., 'ComicSansBoldItalic'")
parser.add_argument("--full-name",                help = "assign full name, e.g., 'Comic Sans Bold Italic'")
parser.add_argument("--version",                  help = "assign version, e.g., '001.000'")
parser.add_argument("--weight",                   help = "assign font weight, e.g., 'Regular', 'Bold'")
parser.add_argument("--italic-angle",             type = float, help = "assign font italic angle, e.g., -22.5")

# NOT IN USE RIGHT NOW, MAY BE IN USE AGAIN
parser.add_argument("--verbose", "-v",            action = 'count', help = "increase output verbosity")
parser.add_argument("--nearest-multiple-of-four", action = 'store_true')
parser.add_argument("--next-multiple-of-four",    action = 'store_true')
parser.add_argument("--pixel-size",               type = int, help = "pixel font size in mult. of 4")
parser.add_argument("--ascent",                   type = int, help = "ascent for metrics, positive above baseline, e.g., 1853")
parser.add_argument("--descent",                  type = int, help = "descent for metrics, positive below baseline, e.g., 605")
parser.add_argument("--line-height",              type = float, help = "line height to use for final metrics, e.g., 1.2")
parser.add_argument("--dot-width",                type = float, help = 'width  of each dot as multiple of pixel width,  e.g., 0.9')
parser.add_argument("--dot-height",               type = float, help = 'height "  "    "   "  "        "  "     height, e.g., 0.9')
# parser.add_argument("--fill-bounding-box-width",  action = 'store_true')

parser.add_argument("--monospace",                action = 'store_true')
parser.add_argument("--check-pixel-counts",       action = 'store_true')

parser.add_argument("filename")
parser.add_argument("destfilenames",               nargs = '*')

args = parser.parse_args()
bf2ttf = BitmapFont2TTF(args)
bf2ttf.bitmapfont2ttf()
