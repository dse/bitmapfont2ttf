#!/usr/bin/env fontforge
# -*- mode: python; coding: utf-8 -*-

import fontforge
import os
import shutil
import sys
import argparse
import re
import collections

# thanks https://stackoverflow.com/questions/5226958/which-equivalent-function-in-python
def which(file_name):
    for path in os.environ["PATH"].split(os.pathsep):
        full_path = os.path.join(path, file_name)
        if os.path.exists(full_path) and os.access(full_path, os.X_OK):
            return full_path
    return None

def bdfParseLine(line):
    words = []
    line = line.strip()
    while True:
        match = re.match(r'^\s*"((?:[^"]+|"")*)"($|\s+)', line)
        if match:
            word = match.group(1) # $1
            word = re.sub(r'""', '"', word)
            words.append(word)
            line = line[len(match.group(0)):] # $'
            continue
        match = re.match(r'^\s*(\S+)($|\s+)', line)
        if match:
            word = match.group(1) # $1
            words.append(word)
            line = line[len(match.group(0)):] # $'
            continue
        break
    return words

class MyBDFChar:
    def __init__(self, name = None):
        self.name = name

        # ENCODING
        self.encoding = None
        self.nonStandardEncoding = None

        # BBX
        self.hasBoundingBox = False
        self.boundingBoxX = None
        self.boundingBoxY = None
        self.boundingBoxXOffset = None
        self.boundingBoxYOffset = None

        # SWIDTH
        self.scalableWidthX = None
        self.scalableWidthY = None

        # DWIDTH
        self.devicePixelWidthX = None
        self.devicePixelWidthY = None

        # SWIDTH1
        self.scalableWidthWritingMode1X = None
        self.scalableWidthWritingMode1Y = None

        # DWIDTH1
        self.devicePixelWidthWritingMode1X = None
        self.devicePixelWidthWritingMode1Y = None

    def __str__(self):
        result = "<MyBDFChar"
        if self.name != None:
            result += (" %s" % self.name)
        if self.encoding != None:
            result += (" @%d" % self.encoding)
        if self.nonStandardEncoding != None:
            result += (" @[%d]" % self.nonStandardEncoding)
        if self.hasBoundingBox:
            result += (" [%g, %g offset %g, %g]" % (
                self.boundingBoxX, self.boundingBoxY,
                self.boundingBoxXOffset, self.boundingBoxYOffset
            ))
        result += ">"
        return result

class MyBDF:
    def __init__(self, filename = None):

        # SIZE
        self.pointSize = None
        self.xRes = None
        self.yRes = None

        # FONTBOUNDINGBOX
        self.hasBoundingBox = False
        self.boundingBoxX = None
        self.boundingBoxY = None
        self.boundingBoxXOffset = None
        self.boundingBoxYOffset = None

        # METRICSSET
        self.metricsSet = None

        # SWIDTH
        self.scalableWidthX = None
        self.scalableWidthY = None

        # DWIDTH
        self.devicePixelWidthX = None
        self.devicePixelWidthY = None

        # SWIDTH1
        self.scalableWidthWritingMode1X = None
        self.scalableWidthWritingMode1Y = None

        # DWIDTH1
        self.devicePixelWidthWritingMode1X = None
        self.devicePixelWidthWritingMode1Y = None

        # STARTPROPERTIES .. ENDPROPERTIES
        self.properties = {}
        self.properties["pixelSize"] = None      # PIXEL_SIZE
        self.properties["pointSize10"] = None    # POINT_SIZE
        self.properties["resolutionX"] = None    # RESOLUTION_X
        self.properties["resolutionY"] = None    # RESOLUTION_Y
        self.properties["spacing"] = None        # SPACING ('M' for monospace or 'C' for character-cell fonts)
        self.properties["capHeight"] = None      # CAP_HEIGHT
        self.properties["xHeight"] = None        # X_HEIGHT
        self.properties["ascent"] = None         # FONT_ASCENT
        self.properties["descent"] = None        # FONT_DESCENT
        self.properties["averageWidth10"] = None # AVERAGE_WIDTH

        self.filename = None
        self.chars = []
        self.charsByEncoding = {}
        self.charsByNonStandardEncoding = {}
        self.charsByName = {}

        if filename != None:
            self.read(filename)

    def read(self, filename):
        with open(filename) as fp:
            self.filename = filename
            self.readFp(fp)

    def readFp(self, fp):
        for line in fp:
            args = bdfParseLine(line)
            if len(args) < 1:
                continue
            (cmd, args) = (args[0].upper(), args[1:])
            if cmd == 'CHARS':
                self.readCharsFp(fp)
            if cmd == 'SIZE' and len(args) >= 3:
                self.pointSize = float(args[0]) # point size of the glyphs
                self.xRes      = float(args[1]) # x resolution of the device for which the font is intended
                self.yRes      = float(args[2]) # y resolution "  "   "      "   "     "   "    "  "
                continue
            if cmd == 'FONTBOUNDINGBOX' and len(args) >= 4:
                self.hasBoundingBox = True
                self.boundingBoxX       = int(args[0]) # integer pixel values, offsets relative to origin
                self.boundingBoxY       = int(args[1])
                self.boundingBoxXOffset = int(args[2])
                self.boundingBoxYOffset = int(args[3])
                continue
            if cmd == 'METRICSSET' and len(args) >= 1:
                self.metricsSet = int(args[0])
            if cmd == 'SWIDTH':
                self.scalableWidthX = float(args[0])
                self.scalableWidthY = float(args[1])
            if cmd == 'DWIDTH':
                self.devicePixelWidthX = float(args[0])
                self.devicePixelWidthY = float(args[1])
            if cmd == 'SWIDTH1':
                self.scalableWidthWritingMode1X = float(args[0])
                self.scalableWidthWritingMode1Y = float(args[1])
            if cmd == 'DWIDTH1':
                self.devicePixelWidthWritingMode1X = float(args[0])
                self.devicePixelWidthWritingMode1Y = float(args[1])
            if cmd == 'VVECTOR':
                sys.stderr.write("bitmapfont2ttf: %s: fonts with VVECTOR not supported yet.\n" % self.args.full_name)
                exit(1)
            if cmd == 'STARTPROPERTIES':
                self.readPropertiesFp(fp)

    def readPropertiesFp(self, fp):
        for line in fp:
            args = bdfParseLine(line)
            if len(args) < 1:
                continue
            (cmd, args) = (args[0].upper(), args[1:])
            if cmd == 'ENDPROPERTIES':
                return
            if cmd == 'PIXEL_SIZE' and len(args) >= 1:
                self.properties["pixelSize"] = float(args[0])
            if cmd == 'POINT_SIZE' and len(args) >= 1:
                self.properties["pointSize10"] = float(args[0])
            if cmd == 'RESOLUTION_X' and len(args) >= 1:
                self.properties["resolutionX"] = float(args[0])
            if cmd == 'RESOLUTION_Y' and len(args) >= 1:
                self.properties["resolutionY"] = float(args[0])
            if cmd == 'SPACING' and len(args) >= 1:
                self.properties["spacing"] = args[0].upper()
            if cmd == 'CAP_HEIGHT' and len(args) >= 1:
                self.properties["capHeight"] = float(args[0])
            if cmd == 'X_HEIGHT' and len(args) >= 1:
                self.properties["xHeight"] = float(args[0])
            if cmd == 'FONT_ASCENT' and len(args) >= 1:
                self.properties["ascent"] = float(args[0])
            if cmd == 'FONT_DESCENT' and len(args) >= 1:
                self.properties["descent"] = float(args[0])
            if cmd == 'AVERAGE_WIDTH' and len(args) >= 1:
                self.properties["averageWidth10"] = float(args[0])

    def readCharsFp(self, fp):
        for line in fp:
            args = bdfParseLine(line)
            if len(args) < 1:
                continue
            (cmd, args) = (args[0].upper(), args[1:])
            if cmd == 'STARTCHAR':
                char = self.readCharFp(fp, args[0])
                self.chars.append(char)
                if char.encoding != None:
                    self.charsByEncoding[char.encoding] = char
                if char.nonStandardEncoding != None:
                    self.charsByEncoding[char.nonStandardEncoding] = char
                if char.name != None:
                    self.charsByName[char.name] = char

    def readBitmapDataFp(self, fp):
        bitmapData = []
        for line in fp:
            if re.match(r'^\s*ENDCHAR\s*$', line, flags = re.IGNORECASE):
                break
            bitmapData.append(line.strip())
        numBits = max(len(s) * 4 for s in bitmapData)
        bitmapData = [bin(int(s, 16))[2:].rjust(numBits, '0') for s in bitmapData]
        return bitmapData

    def readCharFp(self, fp, name):
        char = MyBDFChar(name)
        for line in fp:
            args = bdfParseLine(line)
            if len(args) < 1:
                continue
            (cmd, args) = (args[0].upper(), args[1:])
            if cmd == 'BITMAP':
                char.bitmapData = self.readBitmapDataFp(fp)
                return char
            elif cmd == 'ENDCHAR':
                return char
            elif cmd == 'ENCODING':
                char.encoding = int(args[0])
                if len(args) > 1:
                    char.nonStandardEncoding = int(args[1])
                if char.encoding == -1:
                    char.encoding = None
            elif cmd == 'BBX':
                char.hasBoundingBox = True
                char.boundingBoxX       = int(args[0])
                char.boundingBoxY       = int(args[1])
                char.boundingBoxXOffset = int(args[2])
                char.boundingBoxYOffset = int(args[3])
            elif cmd == 'SWIDTH':
                char.scalableWidthX = float(args[0])
                char.scalableWidthY = float(args[1])
            elif cmd == 'DWIDTH':
                char.devicePixelWidthX = int(args[0])
                char.devicePixelWidthY = int(args[1])
            elif cmd == 'SWIDTH1':
                char.scalableWidthWritingMode1X = float(args[0])
                char.scalableWidthWritingMode1Y = float(args[1])
            elif cmd == 'DWIDTH1':
                char.devicePixelWidthWritingMode1X = int(args[0])
                char.devicePixelWidthWritingMode1Y = int(args[1])
            elif cmd == 'VVECTOR':
                sys.stderr.write("bitmapfont2ttf: %s: fonts with VVECTOR not supported yet.\n" % self.args.full_name)
                exit(1)

    def scalableToPixels(self, scalable):
        # scalable in units of scalable width, or 1/1000th of font's point size
        # divide by 1000 to get multiple of font's point size
        # multiply by <p> to get size in points
        # divide by 72 to get size in inches
        # multiply by <xres> to get size in pixels
        # FIXME: change pointSize to pixelSize?
        return scalable * (self.properties["pixelSize"] * 1.0) / 1000.0 # * self.xRes / 72.0

    def pixelsToScalable(self, pixels):
        # pixels is in units of pixels
        # divide by <xres> to get inches
        # multiply by 72 to get points
        # divide by point size to get multiple of font's point size
        # multiply by 1000 to get units of 1/1000th of font's point size
        # FIXME: change pointSize to pixelSize?
        return pixels * 1000.0 / (self.properties["pixelSize"] * 1.0) # * 72.0 / self.xRes

    def __str__(self):
        result = "<MyBDF"
        if self.filename != None:
            result += (" %s" % self.filename)
        if self.pointSize != None:
            result += (" %gpt" % self.pointSize)
        if self.xRes != None:
            result += (" %gxdpi" % self.xRes)
        if self.yRes != None:
            result += (" %gydpi" % self.yRes)
        if self.hasBoundingBox:
            result += (" [%g, %g offset %g, %g]" % (
                self.boundingBoxX, self.boundingBoxY,
                self.boundingBoxXOffset, self.boundingBoxYOffset
            ))
        result += ">"
        return result

class BitmapFont2TTF:

    saveSFD = False
    nearestMultipleOfFour = False
    nextMultipleOfFour = False
    specifiedPixelSize = None
    asciiOnly = False
    sfdDir = None
    filename = None
    destfilename = None
    verbose = 0
    filename = None
    destfilename = None
    args = None
    metricsAscent = None
    metricsDescent = None
    metricsLineHeight = None

    def setAutoTraceEnvironment(self):
        if self.verbose == 0:
            if 'AUTOTRACE_VERBOSE' in os.environ:
                del os.environ['AUTOTRACE_VERBOSE']
        else:
            os.environ['AUTOTRACE_VERBOSE'] = str(self.verbose)
        self.AUTOTRACE_NAME = 'exact-autotrace-c'
        self.autotrace = which(self.AUTOTRACE_NAME)
        if self.autotrace == None:
            sys.stderr.write('bitmapfont2ttf: %s: no %s program found\n' % (self.args.full_name, self.AUTOTRACE_NAME))
            exit(1)
        os.environ['AUTOTRACE'] = self.autotrace
        fontforge.setPrefs('PreferPotrace', False)
        fontforge.setPrefs('AutotraceArgs', '')

    def setArgs(self, args):
        self.args = args
        self.filename = args.filename
        self.destfilename = args.destfilename
        self.nearestMultipleOfFour = False
        self.nextMultipleOfFour = False
        self.specifiedPixelSize = None
        self.asciiOnly = False
        self.sfdDir = None
        self.useOwnBitmapTracing = False
        self.verbose = 0
        if args.nearest_multiple_of_four:
            self.nearestMultipleOfFour = args.nearest_multiple_of_four
        if args.next_multiple_of_four:
            self.nextMultipleOfFour = args.next_multiple_of_four
        if args.ascii_only:
            self.asciiOnly = args.ascii_only
        if args.sfd_dir:
            self.sfdDir = args.sfd_dir
        if args.verbose:
            self.verbose = args.verbose
        if args.pixel_size:
            self.specifiedPixelSize = args.pixel_size
        if args.ascent:
            self.metricsAscent = args.ascent
        if args.descent:
            self.metricsDescent = args.descent
        if args.line_height:
            self.metricsLineHeight = args.line_height
        if args.use_own_bitmap_tracing:
            self.useOwnBitmapTracing = True
        if args.save_sfd:
            self.saveSFD = True

    def fixFilenames(self):
        if self.filename == os.path.basename(self.filename):
            # Work around an issue where importBitmaps segfaults if you only
            # specify a filename 'foo.pcf'.  Yes, './foo.pcf' works pefectly
            # fine whereas 'foo.pcf' does not.
            self.filename = os.path.join('.', self.filename)
        if self.destfilename == None:
            (rootdestfilename, junk) = os.path.splitext(self.filename)
            self.destfilename = rootdestfilename + '.ttf'
        else:
            (rootdestfilename, junk) = os.path.splitext(self.destfilename)
        self.sfdfilename = rootdestfilename + '.sfd'
        if self.sfdDir != None:
            self.sfdfilename = self.sfdDir + '/' + os.path.basename(self.sfdfilename)

    def fixMissingGlyphs(self):
        self.fixMissingGlyph(39, 8217) # U+0027 APOSTROPHE;   U+2019 RIGHT SINGLE QUOTATION MARK
        self.fixMissingGlyph(45, 8722) # U+002D HYPHEN-MINUS; U+2212 MINUS SIGN
        self.fixMissingGlyph(96, 8216) # U+0060 GRAVE;        U+2018 LEFT SINGLE QUOTATION MARK

    def fixMissingGlyph(self, destUni, sourceUni):
        hasSource = False
        hasDest = False
        sourceGlyph = None
        destGlyph = None
        self.font.selection.select(('unicode', None), sourceUni)
        for glyph in self.font.selection.byGlyphs:
            sourceGlyph = glyph
            hasSource = True
            break
        self.font.selection.select(('unicode', None), destUni)
        for glyph in self.font.selection.byGlyphs:
            hasDest = True
            break
        if hasSource and not hasDest:
            destGlyph = self.font.createChar(destUni)
            self.font.selection.select(sourceGlyph)
            self.font.copy()
            self.font.selection.select(destGlyph)
            self.font.paste()

    def autoTrace(self):
        glyphCount = self.getGlyphCount()

        sys.stderr.write("bitmapfont2ttf: %s: autotracing %d glyphs...\n" % (self.args.full_name, glyphCount))

        glyphIndex = 0
        for glyph in self.font.glyphs():
            if self.asciiOnly and (glyph.encoding < 32 or glyph.encoding > 126):
                continue
            glyphIndex += 1
            if self.verbose >= 2:
                sys.stderr.write("bitmapfont2ttf: %s: [%d/%d] %s\n" % (self.args.full_name, glyphIndex, glyphCount, glyph))
            elif self.verbose >= 1:
                sys.stderr.write("bitmapfont2ttf: %s: [%d/%d]\r" % (self.args.full_name, glyphIndex, glyphCount))
            if self.useOwnBitmapTracing:
                self.traceGlyph(glyph)
            else:
                glyph.autoTrace()
            glyph.addExtrema()
            glyph.simplify()

            # this is not true for lucida typewriter fonts
            if self.swidth != None:
                glyph.width = self.swidth

            bdfChar = None
            if glyph.encoding in self.bdf.charsByEncoding:
                bdfChar = self.bdf.charsByEncoding[glyph.encoding]

            oldWidth = glyph.width
            newWidth = None
            if bdfChar:
                if bdfChar.devicePixelWidthX:
                    newWidth = round(
                        self.bdf.pixelsToScalable(bdfChar.devicePixelWidthX) / 1000.0 * self.font.em
                    )
                elif bdfChar.scalablePixelWidthX:
                    newWidth = round(
                        bdfChar.scalablePixelWidthX / 1000.0 * self.font.em
                    )

            if newWidth != None and abs(newWidth - oldWidth) > 1:
                glyph.width = newWidth
                if os.getenv("BITMAPFONT2TTF_DEBUG"):
                    sys.stderr.write("bitmapfont2ttf: %s: U+%04X: swidth = %s; dwidthx = %s; glyph.width = %s => %s\n" % (
                        self.args.full_name,
                        glyph.encoding,
                        self.swidth,
                        bdfChar.devicePixelWidthX,
                        oldWidth,
                        glyph.width
                    ))

    def adjustGlyphSizes(self):
        if self.finalPixelSize != self.pixelSize:
            sys.stderr.write("bitmapfont2ttf: %s: adjusting pixel size from %d to %d\n" % (self.args.full_name, self.pixelSize, self.finalPixelSize))
            for glyph in self.font.glyphs():
                glyph.transform(psMat.scale(1.0 * self.pixelSize / self.finalPixelSize))

    def traceGlyph(self, glyph):
        if not(glyph.encoding in self.bdf.charsByEncoding):
            return
        bdfChar = self.bdf.charsByEncoding[glyph.encoding]
        y = bdfChar.boundingBoxYOffset + bdfChar.boundingBoxY
        pixY = 1000.0 / self.bdf.properties["pixelSize"]
        pixX = 1000.0 / self.bdf.properties["pixelSize"] * self.bdf.properties["resolutionY"] / self.bdf.properties["resolutionX"]

        for line in bdfChar.bitmapData:
            y = y - 1
            x = bdfChar.boundingBoxXOffset
            for pixel in line:
                if pixel == '1':
                    x1 = pixX * x
                    x2 = pixX * (x + 1)
                    y1 = pixY * y
                    y2 = pixY * (y + 1)
                    contour = fontforge.contour()
                    contour.moveTo(x1, y1)
                    contour.lineTo(x1, y2)
                    contour.lineTo(x2, y2)
                    contour.lineTo(x2, y1)
                    contour.closed = True
                    glyph.layers['Fore'] += contour
                x = x + 1

    def getGlyphCount(self):
        glyphCount = 0
        for glyph in self.font.glyphs():
            if self.asciiOnly and (glyph.encoding < 32 or glyph.encoding > 126):
                continue
            glyphCount += 1
        return glyphCount

    def loadBDF(self):
        # Since FontForge doesn't give us info or properties from the
        # BDF, we get them ourselves.  And we assume we're pulling a
        # BDF instead of, say, a PCF file.
        if not re.search(r'\.bdf$', self.filename):
            raise Exception("BDF required")
        self.bdf = MyBDF(self.filename)

    def setPropertiesFromBDF(self):
        self.isMonospace = self.bdf.properties["spacing"] == 'M' or self.bdf.properties["spacing"] == 'C'
        self.pixelSize = self.bdf.properties["pixelSize"]
        self.finalPixelSize = self.pixelSize
        if self.specifiedPixelSize:
            self.finalPixelSize = 4 * int((self.specifiedPixelSize + 2) / 4)
        elif self.nextMultipleOfFour:
            self.finalPixelSize = 4 * int((self.pixelSize + 3) / 4)
        elif self.nearestMultipleOfFour:
            self.finalPixelSize = 4 * int((self.pixelSize + 2) / 4)

    def setFontMetas(self):
        if self.args != None:
            if self.args.copyright != None:
                self.font.copyright = self.args.copyright
            if self.args.comment != None:
                self.font.comment = self.args.comment
            if self.args.font_name != None:
                self.font.fontname = self.args.font_name
            if self.args.family_name != None:
                self.font.familyname = self.args.family_name
            if self.args.full_name != None:
                self.font.fullname = self.args.full_name
            if self.args.version != None:
                self.font.version = self.args.version
            if self.args.weight != None:
                self.font.weight = self.args.weight
            if self.args.italic_angle != None:
                self.font.italicangle = self.args.italic_angle

    def save(self):
        self.font.generate(self.destfilename)
        sys.stderr.write("bitmapfont2ttf: %s: Wrote %s\n" % (self.args.full_name, self.destfilename))
        if args.save_sfd:
            self.font.save(self.sfdfilename)
            sys.stderr.write("bitmapfont2ttf: %s: Wrote %s\n" % (self.args.full_name, self.sfdfilename))

    def setSwidth(self):
        if self.isMonospace:
            self.swidth = int(0.5 + 1.0 * self.font.em * self.bdf.boundingBoxX / self.pixelSize)
            if os.getenv("BITMAPFONT2TTF_DEBUG"):
                sys.stderr.write("bitmapfont2ttf: %s: setWidth:\n" % self.args.full_name)
                sys.stderr.write("    setting font swidth to %s\n" % self.swidth)
                sys.stderr.write("    self.font.em = %s\n" % self.font.em)
                sys.stderr.write("    self.bdf.boundingBoxX = %s\n" % self.bdf.boundingBoxX)
                sys.stderr.write("    self.pixelSize = %s\n" % self.pixelSize)
        else:
            self.swidth = None
            if os.getenv("BITMAPFONT2TTF_DEBUG"):
                sys.stderr.write("bitmapfont2ttf: %s: setSwidth: no font swidth\n" % self.args.full_name)

    def setInitialAscentDescent(self):
        self.descentPx = self.pixelSize - self.bdf.properties["ascent"]
        self.ascentPx = self.bdf.properties["ascent"]

        # must be specified before bitmap import for baseline alignment
        em = self.font.em
        ascent  = int(0.5 + 1.0 * em * self.ascentPx  / self.pixelSize)
        descent = int(0.5 + 1.0 * em * self.descentPx / self.pixelSize)
        self.font.ascent  = ascent
        self.font.descent = descent

    def setItalic(self):
        self.isItalic = (re.search(r'\b(italic|oblique)\b', self.font.fontname, flags = re.IGNORECASE) or
                         re.search(r'\b(italic|oblique)\b', self.font.fullname, flags = re.IGNORECASE) or
                         (self.args.font_name   != None and re.search(r'\b(italic|oblique)\b', self.args.font_name,   flags = re.IGNORECASE)) or
                         (self.args.family_name != None and re.search(r'\b(italic|oblique)\b', self.args.family_name, flags = re.IGNORECASE)))
        if self.isItalic:
            self.font.italicangle = 15
        else:
            self.font.italicangle = 0

    def setWeight(self):
        if self.font.weight == 'Regular' or self.font.weight == 'Medium' or self.font.weight == 'Book':
            self.font.weight = 'Book'
            self.font.os2_weight = 400
            if self.isItalic:
                self.font.os2_stylemap |= 0x0201
                self.font.macstyle     |= 0x0002
            else:
                self.font.os2_stylemap |= 0x0040
                self.font.macstyle     |= 0x0000
        elif self.font.weight == 'Bold':
            self.font.weight = 'Bold'
            self.font.os2_weight = 700
            if self.isItalic:
                self.font.os2_stylemap |= 0x0221
                self.font.macstyle     |= 0x0003
            else:
                self.font.os2_stylemap |= 0x0020
                self.font.macstyle     |= 0x0001

    def useFinalPixelSize(self):
        if self.finalPixelSize != self.pixelSize:
            if self.finalPixelSize > self.pixelSize:
                diff = self.finalPixelSize - self.pixelSize # 1, 2, 3, ...
                diff1 = int(diff) / 2 # 1 => 0, 2 => 1, 3 => 1, 4 => 2, ...
                diff2 = diff - diff1  # 1 => 1, 2 => 1, 3 => 2, 4 => 2, ...
                self.ascentPx += diff2
                self.descentPx += diff1
            else:
                diff = self.pixelSize - self.finalPixelSize # 1, 2, 3, ...
                diff1 = int(diff) / 2 # 1 => 0, 2 => 1, 3 => 1, 4 => 2, ...
                diff2 = diff - diff1  # 1 => 1, 2 => 1, 3 => 2, 4 => 2, ...
                self.ascentPx -= diff2
                self.descentPx -= diff1
            em = self.font.em
            self.font.ascent  = int(0.5 + 1.0 * em * self.ascentPx  / self.finalPixelSize)
            self.font.descent = int(0.5 + 1.0 * em * self.descentPx / self.finalPixelSize)

    def setFinalMetrics(self):
        ascent  = self.font.ascent
        descent = self.font.descent

        if self.metricsAscent != None: # --ascent
            ascent = self.metricsAscent
        if self.metricsDescent != None: # --descent
            descent = self.metricsDescent
        if self.metricsLineHeight != None:                           # --line-height, e.g., 1.1
            height      = self.font.em                               # e.g., 2048
            finalHeight = int(0.5 + self.metricsLineHeight * height) # e.g., 2253
            add         = finalHeight - height                       # e.g., 205
            addAscent   = int(0.5 + 1.0 * add / 2)                   # e.g., 103
            addDescent  = add - addAscent                            # e.g., 102
            ascent      = self.font.ascent + addAscent
            descent     = self.font.descent + addDescent

        self.font.ascent          = ascent
        self.font.descent         = descent

        self.font.hhea_ascent     = ascent
        self.font.hhea_descent    = -descent
        self.font.hhea_linegap    = 0

        self.font.os2_typoascent  = ascent
        self.font.os2_typodescent = -descent
        self.font.os2_typolinegap = 0

        self.font.os2_winascent   = ascent
        self.font.os2_windescent  = descent

    def bitmapfont2ttf(self, args):
        self.setArgs(args)
        self.setAutoTraceEnvironment()
        self.fixFilenames()
        self.loadBDF()
        self.setPropertiesFromBDF()
        self.font = fontforge.font()
        self.setSwidth()
        self.setInitialAscentDescent()
        self.font.importBitmaps(self.filename, True)
        self.font.os2_vendor = 'PfEd'
        self.font.encoding = 'iso10646-1'
        self.setItalic()
        self.setWeight()
        self.useFinalPixelSize()
        self.setFontMetas()
        self.autoTrace()
        self.adjustGlyphSizes()
        self.fixMissingGlyphs()
        self.setFinalMetrics()
        self.save()

bf2ttf = BitmapFont2TTF()

parser = argparse.ArgumentParser(description = "Generate TTF files from bitmap fonts, e.g., BDF and PCF")
parser.add_argument("--copyright",                help = "assign copyright holder and date, e.g., 'Copyright (c) 2020 Darren Embry'")
parser.add_argument("--comment",                  help = "assign comment string, e.g., '2020-01-01'")
parser.add_argument("--family-name",              help = "assign family name, e.g., 'Comic Sans'")
parser.add_argument("--font-name",                help = "assign font name, e.g., 'ComicSansBoldItalic'")
parser.add_argument("--full-name",                help = "assign full name, e.g., 'Comic Sans Bold Italic'")
parser.add_argument("--version",                  help = "assign version, e.g., '001.000'")
parser.add_argument("--weight",                   help = "assign font weight, e.g., 'Regular', 'Bold'")
parser.add_argument("--italic-angle",             type = float, help = "assign font italic angle, e.g., -22.5")
parser.add_argument("--save-sfd",                 help = "keep .sfd file (for FontForge)", action = "store_true")
parser.add_argument("--verbose", "-v",            action = 'count', help = "increase output verbosity")
parser.add_argument("--nearest-multiple-of-four", action = 'store_true')
parser.add_argument("--next-multiple-of-four",    action = 'store_true')
parser.add_argument("--pixel-size",               type = int, help = "pixel font size in mult. of 4")
parser.add_argument("--ascii-only",               action = 'store_true')
parser.add_argument("--sfd-dir",                  type = str)
parser.add_argument("--ascent",                   type = int, help = "ascent for metrics, positive above baseline, e.g., 1853")
parser.add_argument("--descent",                  type = int, help = "descent for metrics, positive below baseline, e.g., 605")
parser.add_argument("--line-height",              type = float, help = "line height to use for final metrics, e.g., 1.2")
parser.add_argument("--use-own-bitmap-tracing",   action = 'store_true')
parser.add_argument("filename")
parser.add_argument("destfilename",               nargs = '?')

args = parser.parse_args()

bf2ttf.bitmapfont2ttf(args)
